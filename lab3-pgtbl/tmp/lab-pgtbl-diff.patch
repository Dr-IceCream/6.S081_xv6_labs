diff --git a/answers-pgtbl.txt b/answers-pgtbl.txt
new file mode 100644
index 0000000..afef9b7
--- /dev/null
+++ b/answers-pgtbl.txt
@@ -0,0 +1,2 @@
+ 第0页包含date and text部分，第1页包含guard page用以保护堆栈，第2页是stack；用户态运行的时候不可以读取/写入第1页映射的内存，因为这部分是用来防止溢出保护stack的，不用来读写。这一点从代码中也可以看见。
+ 三个测试返回-1的条件（失败条件）分别是srcva >= p->sz； srcva+len >= p->sz ；srcva+len < srcva；第三个测试的srcva+len < srcva是为了检测溢出，因为srcva和len都是uint64无符号64位整型数，例如srcva=p->sz+1，len=0xFFFFFFFFFFFFFFFF即可满足上述一二测试不返回-1而第三测试返回-1
diff --git a/gradelib.py b/gradelib.py
index e8d7814..9308761 100644
--- a/gradelib.py
+++ b/gradelib.py
@@ -425,7 +425,7 @@ class Runner():
         should be a list of additional arguments to pass to make.  The
         timeout argument bounds how long to run before returning."""
 
-        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):
+        def run_qemu_kw(target_base="qemu", make_args=[], timeout=50):
             return target_base, make_args, timeout
         target_base, make_args, timeout = run_qemu_kw(**kw)
 
diff --git a/gradelib.pyc b/gradelib.pyc
new file mode 100644
index 0000000..f87e5ab
Binary files /dev/null and b/gradelib.pyc differ
diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..1be691e 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -92,6 +92,7 @@ int             fork(void);
 int             growproc(int);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
+// void            proc_freekpagetable(pagetable_t, uint64, uint64);
 int             kill(int);
 struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
@@ -160,8 +161,9 @@ int             uartgetc(void);
 // vm.c
 void            kvminit(void);
 void            kvminithart(void);
-uint64          kvmpa(uint64);
-void            kvmmap(uint64, uint64, uint64, int);
+uint64          kvmpa(pagetable_t, uint64);
+void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
+void            ukvmmap(pagetable_t, uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
 void            uvminit(pagetable_t, uchar *, uint);
@@ -174,10 +176,19 @@ int             uvmcopy(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
+pagetable_t     ukvminit(void);
+pagetable_t     kvmmake(void);
+int             u2kvmcopy(pagetable_t, pagetable_t, uint64, uint64);
+//vmcopyin.c
+int             copyin_new(pagetable_t, char *, uint64, uint64);
+int             copyinstr_new(pagetable_t , char *, uint64, uint64);
+
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..5726cc2 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -75,6 +75,9 @@ exec(char *path, char **argv)
   sp = sz;
   stackbase = sp - PGSIZE;
 
+  //copy the user page table to process's kernel page table
+  //u2kvmcopy(p->pagetable, p->kpagetable, 0, sz);
+
   // Push argument strings, prepare rest of stack in ustack.
   for(argc = 0; argv[argc]; argc++) {
     if(argc >= MAXARG)
@@ -116,6 +119,18 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  
+  //unmap old kernel page table and copy the new one
+  uvmunmap(p->kpagetable, 0, PGROUNDUP(oldsz)/PGSIZE,0);
+  if(u2kvmcopy(p->pagetable, p->kpagetable, 0,p->sz)<0){
+    goto bad;
+  }
+  
+  //print a page table
+  if(p->pid==1){
+    vmprint(p->pagetable);
+  }
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..6209df2 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -31,15 +31,16 @@ procinit(void)
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
 
-      // Allocate a page for the process's kernel stack.
-      // Map it high in memory, followed by an invalid
-      // guard page.
-      char *pa = kalloc();
-      if(pa == 0)
-        panic("kalloc");
-      uint64 va = KSTACK((int) (p - proc));
-      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      p->kstack = va;
+      // for lab3-2, move this to allocproc
+      //  // Allocate a page for the process's kernel stack.
+      //  // Map it high in memory, followed by an invalid
+      //  // guard page.
+      //  char *pa = kalloc();
+      //  if(pa == 0)
+      //    panic("kalloc");
+      //  uint64 va = KSTACK((int) (p - proc));
+      //  kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+      //  p->kstack = va;
   }
   kvminithart();
 }
@@ -121,6 +122,23 @@ found:
     return 0;
   }
 
+  // An empty user kernel page table
+  p->kpagetable=kvmmake();
+  if(p->kpagetable==0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  // init a kernel stack
+  char *pa = kalloc();
+  if(pa == 0)
+    panic("kalloc");
+  uint64 va=KSTACK((int)(p-proc));
+  //uint64 va = KSTACK((int) (p - proc));
+  kvmmap(p->kpagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  p->kstack = va;
+  
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -130,6 +148,23 @@ found:
   return p;
 }
 
+void
+kvmfree(pagetable_t kpgtbl) {
+  for(int i = 0; i < 512; i++){
+    pte_t pte = kpgtbl[i];
+    if (pte & PTE_V){
+      kpgtbl[i] = 0;
+      if ((pte & (PTE_R|PTE_W|PTE_X)) == 0) {
+        uint64 child = PTE2PA(pte);
+	kvmfree((pagetable_t)child);
+      }
+    } else if(pte & PTE_V){
+      panic("kvmfree: leaf");
+    }
+  }
+  kfree((void*)kpgtbl);
+}
+
 // free a proc structure and the data hanging from it,
 // including user pages.
 // p->lock must be held.
@@ -139,6 +174,12 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  if(p->kstack)
+    uvmunmap(p->kpagetable,p->kstack,1,1);
+  p->kstack=0;
+  if(p->kpagetable)
+    kvmfree(p->kpagetable);
+  p->kpagetable=0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -149,6 +190,18 @@ freeproc(struct proc *p)
   p->chan = 0;
   p->killed = 0;
   p->xstate = 0;
+
+  //fistly, free kernel stack
+  /*if(p->kstack){
+    uvmunmap(p->kpagetable,p->kstack,1,1);
+  }
+  p->kstack=0;
+  //free kernel page table(preserve physical memory)
+  if(p->kpagetable){
+    proc_freekpagetable(p->kpagetable);
+  }
+  p->kpagetable=0;*/
+
   p->state = UNUSED;
 }
 
@@ -195,6 +248,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+//free kernel page table (preserve physical memory)
+void
+proc_freekpagetable(pagetable_t kpgtbl, uint64 kstack, uint64 sz) {
+  uvmunmap(kpgtbl, kstack, 1, 1);
+  kvmfree(kpgtbl);
+}
+
+
 // a user program that calls exec("/init")
 // od -t xC initcode
 uchar initcode[] = {
@@ -221,6 +282,9 @@ userinit(void)
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  //init the kernel page table
+  u2kvmcopy(p->pagetable,p->kpagetable,0,p->sz);
+  
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -243,11 +307,26 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
+    //ensure that the process if under PLIC address
+    if(sz+n>PLIC){
+      return -1;
+    }
     if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    //copy the added user page table to process's kernel page table
+    if(u2kvmcopy(p->pagetable, p->kpagetable, p->sz, sz)<0){
+      return -1;
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    //if(n>=PGSIZE){
+    //  uvmunmap(p->kpagetable,PGROUNDUP(sz),n/PGSIZE,0);
+    //}
+    //free process's kernel page table without (keep the physical memory)
+    if(PGROUNDUP(sz)<PGROUNDUP(p->sz)){
+      uvmunmap(p->kpagetable,PGROUNDUP(sz),n/PGSIZE,0);
+    }
   }
   p->sz = sz;
   return 0;
@@ -289,6 +368,13 @@ fork(void)
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
+  // copy user page table to kernel page table
+  if(u2kvmcopy(np->pagetable, np->kpagetable, 0, np->sz) < 0) {
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
@@ -473,8 +559,13 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+	//load process kernel page table
+	w_satp(MAKE_SATP(p->kpagetable));
+	//flush the TLB
+	sfence_vma();
         swtch(&c->context, &p->context);
-
+        
+        //kvminithart();
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
@@ -483,6 +574,9 @@ scheduler(void)
       }
       release(&p->lock);
     }
+    if(found==0){
+      kvminithart();
+    }
 #if !defined (LAB_FS)
     if(found == 0) {
       intr_on();
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..8b36868 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -98,6 +98,7 @@ struct proc {
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
+  pagetable_t kpagetable;      // kernel page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
index 06e0645..10331c9 100644
--- a/kernel/virtio_disk.c
+++ b/kernel/virtio_disk.c
@@ -16,6 +16,7 @@
 #include "fs.h"
 #include "buf.h"
 #include "virtio.h"
+#include "proc.h"
 
 // the address of virtio mmio register r.
 #define R(r) ((volatile uint32 *)(VIRTIO0 + (r)))
@@ -203,7 +204,7 @@ virtio_disk_rw(struct buf *b, int write)
 
   // buf0 is on a kernel stack, which is not direct mapped,
   // thus the call to kvmpa().
-  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
+  disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()->kpagetable, (uint64) &buf0);
   disk.desc[idx[0]].len = sizeof(buf0);
   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
   disk.desc[idx[0]].next = idx[1];
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..6a9657b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -18,9 +20,27 @@ extern char trampoline[]; // trampoline.S
 /*
  * create a direct-map page table for the kernel.
  */
+
+pagetable_t
+kvmmake()
+{
+  pagetable_t kpagetable = (pagetable_t) kalloc();
+  memset(kpagetable, 0, PGSIZE);
+  kvmmap(kpagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+  kvmmap(kpagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+  kvmmap(kpagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+  kvmmap(kpagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+  kvmmap(kpagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+  kvmmap(kpagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+  kvmmap(kpagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+
+  return kpagetable;
+}
+
 void
 kvminit()
 {
+	/*
   kernel_pagetable = (pagetable_t) kalloc();
   memset(kernel_pagetable, 0, PGSIZE);
 
@@ -44,7 +64,43 @@ kvminit()
 
   // map the trampoline for trap entry/exit to
   // the highest virtual address in the kernel.
-  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);*/
+  kernel_pagetable=kvmmake();
+}
+
+//similar to kvminit
+pagetable_t
+ukvminit()
+{
+  //pagetable_t kpagetable = (pagetable_t) kalloc();
+  //memset(kpagetable, 0, PGSIZE);
+  pagetable_t kpagetable=uvmcreate();
+  if(kpagetable==0){
+    return 0;
+  }
+
+  // uart registers
+  ukvmmap(kpagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+
+  // virtio mmio disk interface
+  ukvmmap(kpagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+
+  // CLINT
+  ukvmmap(kpagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+
+  // PLIC
+  ukvmmap(kpagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+
+  // map kernel text executable and read-only.
+  ukvmmap(kpagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+
+  // map kernel data and the physical RAM we'll make use of.
+  ukvmmap(kpagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  ukvmmap(kpagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  return kpagetable;
 }
 
 // Switch h/w page table register to the kernel's page table,
@@ -115,18 +171,26 @@ walkaddr(pagetable_t pagetable, uint64 va)
 // only used when booting.
 // does not flush TLB or enable paging.
 void
-kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)
+kvmmap(pagetable_t kpagetable, uint64 va, uint64 pa, uint64 sz, int perm)
 {
-  if(mappages(kernel_pagetable, va, sz, pa, perm) != 0)
+  if(mappages(kpagetable, va, sz, pa, perm) != 0)
     panic("kvmmap");
 }
 
+//similar to kvmmap
+void
+ukvmmap(pagetable_t kpagetable, uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  if(mappages(kpagetable, va, sz, pa, perm) != 0)
+    panic("ukvmmap");
+}
+
 // translate a kernel virtual address to
 // a physical address. only needed for
 // addresses on the stack.
 // assumes va is page aligned.
 uint64
-kvmpa(uint64 va)
+kvmpa(pagetable_t kernel_pagetable, uint64 va)
 {
   uint64 off = va % PGSIZE;
   pte_t *pte;
@@ -156,8 +220,8 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
   for(;;){
     if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_V)
-      panic("remap");
+    //if(*pte & PTE_V)
+      //panic("remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
       break;
@@ -335,6 +399,23 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// similar to kvmcopy
+// copy its user page table to its kernel page table
+int u2kvmcopy(pagetable_t upgtbl, pagetable_t kpgtbl, uint64 begin, uint64 end) 
+{
+  pte_t *pte_from,*pte_to;
+  uint64 begin_page = PGROUNDUP(begin);    // Round up
+  for(uint64 i = begin_page; i < end; i += PGSIZE){
+    if((pte_from = walk(upgtbl, i, 0)) == 0)
+      panic("u2kvmcopy: pte should exist");
+    /*if((*pte & PTE_V) == 0)
+      panic("u2kvmcopy: page not present");*/
+    if((pte_to=walk(kpgtbl,i,1))==0)
+      panic("copyin_new: walk faild");
+    *pte_to=(*pte_from)&(~PTE_U);
+  }
+  return 0;
+}
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -379,23 +460,7 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
-
-  while(len > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > len)
-      n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable,dst,srcva,len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -405,38 +470,34 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
-  int got_null = 0;
+  return copyinstr_new(pagetable,dst,srcva,max);
+}
 
-  while(got_null == 0 && max > 0){
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (srcva - va0);
-    if(n > max)
-      n = max;
-
-    char *p = (char *) (pa0 + (srcva - va0));
-    while(n > 0){
-      if(*p == '\0'){
-        *dst = '\0';
-        got_null = 1;
-        break;
-      } else {
-        *dst = *p;
+//print page table recursively
+void part_vmprint(pagetable_t pagetable,int level)
+{
+  for(int i=0;i<512;i++){
+    pte_t pte=pagetable[i];
+    if(pte&PTE_V){
+      switch(level)
+      {
+        case 3:
+          printf(".. ");
+        case 2:
+          printf(".. ");
+        case 1:
+          printf("..%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+      }
+      pagetable_t child = (pagetable_t) PTE2PA(pte);
+      if((pte&(PTE_R|PTE_W|PTE_X))==0){
+	part_vmprint(child,level+1);
       }
-      --n;
-      --max;
-      p++;
-      dst++;
     }
-
-    srcva = va0 + PGSIZE;
-  }
-  if(got_null){
-    return 0;
-  } else {
-    return -1;
   }
 }
+//call part_vmprint
+void vmprint(pagetable_t pagetable)
+{
+  printf("page table %p\n",pagetable);
+  part_vmprint(pagetable,1);
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..6fd30a2
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+303030303030303030303030303030303030303030303030303030303030
