diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..1185201
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1 @@
+in 2 threads case, the concurrent put() will r/w the same memory, which cause the key missing event
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..2dcd3f9 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,7 +30,16 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  // judge whether all threads have reached the barrier
+  if(++bstate.nthread != nthread)  { // not all have reached
+    pthread_cond_wait(&bstate.barrier_cond,&bstate.barrier_mutex); // wait
+  } else { // all threads have reached
+    bstate.nthread = 0; // reset nthread
+    bstate.round++; // increase round
+    pthread_cond_broadcast(&bstate.barrier_cond); // wake up all threads
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 6df1500..ddd6883 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -5,7 +5,7 @@
 #include <pthread.h>
 #include <sys/time.h>
 
-#define NBUCKET 5
+#define NBUCKET 7
 #define NKEYS 100000
 
 struct entry {
@@ -16,6 +16,7 @@ struct entry {
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
+pthread_mutex_t lock[NBUCKET];
 
 double
 now()
@@ -50,8 +51,10 @@ void put(int key, int value)
     // update the existing key.
     e->value = value;
   } else {
+    pthread_mutex_lock(&lock[i]);
     // the new is new.
     insert(key, value, &table[i], table[i]);
+    pthread_mutex_unlock(&lock[i]);
   }
 }
 
@@ -60,7 +63,6 @@ get(int key)
 {
   int i = key % NBUCKET;
 
-
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key) break;
@@ -115,6 +117,10 @@ main(int argc, char *argv[])
     keys[i] = random();
   }
 
+  //initialize the lock
+  for(int i=0;i<NBUCKET;i++){
+    pthread_mutex_init(&lock[i],NULL);
+  }
   //
   // first the puts
   //
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..1e8b314
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+6
diff --git a/user/uthread.c b/user/uthread.c
index 8e46826..b66c0cd 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,10 +10,30 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+// Saved registers for user context switches.
+struct context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct context ctx;           /* the context of thread */
 
 };
 struct thread all_thread[MAX_THREAD];
@@ -63,6 +83,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch((uint64)&t->ctx, (uint64)&current_thread->ctx);
   } else
     next_thread = 0;
 }
@@ -77,6 +98,8 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->ctx.ra=(uint64)func;
+  t->ctx.sp=(uint64)&t->stack+STACK_SIZE;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..57da06b 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -8,4 +8,33 @@
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
+        sd ra, 0(a0)    
+        sd sp, 8(a0)
+        sd s0, 16(a0)
+        sd s1, 24(a0)
+        sd s2, 32(a0)
+        sd s3, 40(a0)
+        sd s4, 48(a0)
+        sd s5, 56(a0)
+        sd s6, 64(a0)
+        sd s7, 72(a0)
+        sd s8, 80(a0)
+        sd s9, 88(a0)
+        sd s10, 96(a0)
+        sd s11, 104(a0)
+
+        ld ra, 0(a1)
+        ld sp, 8(a1)
+        ld s0, 16(a1)
+        ld s1, 24(a1)
+        ld s2, 32(a1)
+        ld s3, 40(a1)
+        ld s4, 48(a1)
+        ld s5, 56(a1)
+        ld s6, 64(a1)
+        ld s7, 72(a1)
+        ld s8, 80(a1)
+        ld s9, 88(a1)
+        ld s10, 96(a1)
+        ld s11, 104(a1)
 	ret    /* return to ra */
