diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..6f1b09d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -47,8 +47,14 @@ sys_sbrk(void)
   if(argint(0, &n) < 0)
     return -1;
   addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
+  //grow in size
+  myproc()->sz += n;
+  //if n<0, free the space
+  if(n<0){
+    uvmdealloc(myproc()->pagetable, addr, myproc()->sz);
+  }
+  /*if(growproc(n) < 0)
+    return -1;*/
   return addr;
 }
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..45d53bc 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,6 +67,23 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if(r_scause()==13||r_scause()==15){
+    uint64 va=r_stval(); //the virtual address
+    uint64 pa=(uint64)kalloc();
+    if(pa == 0){ //fial to kalloc
+      p->killed = 1;
+    }else if(va >= p->sz ||va <=PGROUNDDOWN(p->trapframe->sp)){
+      //va is illegal
+      kfree((void*)pa);
+      p->killed = 1;
+    }else{
+      va=PGROUNDDOWN(va);
+      memset((void*)pa, 0, PGSIZE);
+      if (mappages(p->pagetable, va, PGSIZE, pa, PTE_W | PTE_U | PTE_R) != 0) {
+        kfree((void*)pa);
+        p->killed = 1;
+      }
+    }
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..318f029 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -101,10 +103,25 @@ walkaddr(pagetable_t pagetable, uint64 va)
     return 0;
 
   pte = walk(pagetable, va, 0);
-  if(pte == 0)
+  /*if(pte == 0)
     return 0;
   if((*pte & PTE_V) == 0)
-    return 0;
+    return 0;*/
+  if(pte == 0 ||(*pte & PTE_V) == 0){
+    struct proc *p=myproc();
+    if(va >= p->sz || va < PGROUNDUP(p->trapframe->sp)){
+      return 0;
+    }
+    pa = (uint64)kalloc();
+    if(pa==0){
+      return 0;
+    }
+    if (mappages(p->pagetable, va, PGSIZE, pa, PTE_W|PTE_R|PTE_U|PTE_X) != 0) {
+      kfree((void*)pa);
+      return 0;
+    }
+    return pa;
+  }
   if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
@@ -180,10 +197,14 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     panic("uvmunmap: not aligned");
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+    if((pte = walk(pagetable, a, 0)) == 0){
+      //panic("uvmunmap: walk");
+      continue;
+    }
+    if((*pte & PTE_V) == 0){
+      //panic("uvmunmap: not mapped");
+      continue;
+    }
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -314,10 +335,14 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+    if((pte = walk(old, i, 0)) == 0){
+      //panic("uvmcopy: pte should exist");
+      continue;
+    }
+    if((*pte & PTE_V) == 0){
+      //panic("uvmcopy: page not present");
+      continue;
+    }
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..00750ed
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+3
