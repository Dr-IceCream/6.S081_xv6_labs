diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..b5ff83c 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             addref(void *);
+int             cowpage(pagetable_t, uint64);
+void*           cow_alloc(pagetable_t, uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -171,6 +174,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..9222387 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -23,10 +23,16 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct {
+  struct spinlock lock;    //ensure the consistency
+  int cnt[PHYSTOP/PGSIZE]; //record the reference count
+}refcnt;
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&refcnt.lock, "kref");
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -35,8 +41,12 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    acquire(&refcnt.lock);
+    refcnt.cnt[(uint64)p / PGSIZE] = 1; //
+    release(&refcnt.lock);
     kfree(p);
+  }
 }
 
 // Free the page of physical memory pointed at by v,
@@ -51,15 +61,21 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+  acquire(&refcnt.lock);
+  if(--refcnt.cnt[(uint64)pa/PGSIZE]==0){
+    release(&refcnt.lock);
+    // Fill with junk to catch dangling refs.
+    memset(pa, 1, PGSIZE);
 
-  r = (struct run*)pa;
+    r = (struct run*)pa;
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+    acquire(&kmem.lock);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    release(&kmem.lock);
+  }else{
+    release(&refcnt.lock);
+  }
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -76,7 +92,76 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
+  addref((char*)r);
+
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+//add the reference count with the spinlock
+int
+addref(void* pa)
+{
+  if( (uint64)pa%PGSIZE!=0 || (char*)pa < end || (uint64)pa > PHYSTOP){
+    return -1;
+  }
+  acquire(&refcnt.lock);
+  ++refcnt.cnt[(uint64)pa/PGSIZE];
+  release(&refcnt.lock);
+  return 0;
+}
+int 
+getcnt(void* pa)
+{
+  return refcnt.cnt[(uint64)pa / PGSIZE];
+}
+
+// check whether it is cow page
+// if it is ,return 0,else -1
+int
+cowpage(pagetable_t pagetable, uint64 va)
+{
+  if(va > MAXVA) return -1;
+  pte_t *pte = walk(pagetable, va, 0);
+  if(pte == 0) return -1;
+  if((*pte&PTE_V) == 0) return -1;
+  return (*pte & PTE_COW) ? 0 : -1; 
+}
+// alloc physical page for cow page
+void*
+cow_alloc(pagetable_t pagetable, uint64 va)
+{
+  if(va % PGSIZE != 0){
+    return 0;
+  }
+  uint64 pa = walkaddr(pagetable, va);
+  if(pa == 0){
+    return 0;
+  }
+
+  pte_t *pte = walk(pagetable, va, 0);
+  if(getcnt((char*)pa) == 1){
+    *pte |= PTE_W;
+    *pte &= ~PTE_COW;
+    return (void*)pa;
+  }else{ // there are more than one reference
+    char* mem;
+    if((mem=kalloc()) == 0){
+      return 0;
+     }
+    *pte &= ~PTE_V;
+    // copy the content to this new mem
+    memmove(mem, (char*)pa, PGSIZE);
+    // map and set the pte
+    if(mappages(pagetable, va, PGSIZE, (uint64)mem, (PTE_FLAGS(*pte) | PTE_W) & ~PTE_COW) != 0){
+      kfree(mem);
+      *pte &= ~PTE_V;
+      return 0;
+    }
+    // old physical page reference count--
+    kfree((char*)PGROUNDDOWN(pa));
+    return mem;
+  }
+}
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..2a237c3 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 8) //record whether is the COW map
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..5786fdb 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,9 +65,14 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  }else if(r_scause() == 13 || r_scause() == 15){ //page fault
+     uint64 va = r_stval(); //get the virtual address with fault
+     if(va > p->sz || cowpage(p->pagetable,va) != 0 || cow_alloc(p->pagetable, PGROUNDDOWN(va)) == 0) {
+      p->killed = 1;
+     }
+  }else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  }else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..943327c 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -311,7 +311,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -320,12 +320,24 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    /*if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
+    }*/
+    if(flags & PTE_W){
+      flags = (flags | PTE_COW) & (~PTE_W); // update the pte
+      *pte = PA2PTE(pa) | flags;
+    }
+    // just map it
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+    // add the reference count
+    if(addref((char*)pa) != 0){
+      return -1;
     }
   }
   return 0;
@@ -359,6 +371,11 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
+
+    if(cowpage(pagetable, va0) == 0){
+      pa0 = (uint64)cow_alloc(pagetable, va0);
+    }
+
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..7f8f011
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+7
