diff --git a/Makefile b/Makefile
index 0fbaf7c..d2b4623 100644
--- a/Makefile
+++ b/Makefile
@@ -149,7 +149,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+        $U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
 
 ifeq ($(LAB),syscall)
 UPROGS += \
diff --git a/gradelib.pyc b/gradelib.pyc
new file mode 100644
index 0000000..83c9389
Binary files /dev/null and b/gradelib.pyc differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..209e3ef
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+20
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..fec98c7
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,86 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+
+//get the filename in nowly path
+char*
+fmtname(char *path)
+{
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--);
+  p++;
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), '\0', DIRSIZ-strlen(p));
+  return buf;
+}
+//find file
+void find(char*path,char*filename)
+{
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd=open(path,0))<0){
+    fprintf(2,"find: cannot open%s\n",path);
+    exit(1);
+  }
+
+  if(fstat(fd,&st)<0){
+    fprintf(2,"find: cannot get state of %s\n",path);
+    close(fd);
+    exit(1);
+  }
+
+  switch(st.type){
+    case T_FILE: //if file,then check the name
+      if(strcmp(fmtname(path),filename)==0){
+	printf("%s\n",path);
+      }
+      break;
+    case T_DIR: //if dir,then call find recursively
+      if(strlen(path)+1+DIRSIZ+1>sizeof(buf)){
+	fprintf(2,"find: path too long\n");
+	exit(1);
+      }
+      //copy path to buf and add /
+      strcpy(buf,path);
+      p=buf+strlen(buf);
+      *p++='/';
+      //read directory entry(dirent)
+      while(read(fd,&de,sizeof(de))==sizeof(de)){
+	if(de.inum==0){ //invalid directory entry
+	  continue;
+	}
+	//add de.name to path in buf
+	memmove(p,de.name,DIRSIZ);
+	//add ending in string
+	p[DIRSIZ]=0;
+	//if de.name=="."or"..",then don't recurse
+	if(!strcmp(de.name,".")||!strcmp(de.name,".."))continue;
+	find(buf,filename);
+      }
+      break;
+  }
+  close(fd);
+}
+//use find()
+int
+main(int argc, char *argv[])
+{
+  if(argc!=3){
+    fprintf(2,"usage: find <path> <filename>\n");
+    exit(1);
+  }
+  find(argv[1],argv[2]);
+  exit(0);
+}
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..25b3cee
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,45 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 1){
+    fprintf(2, "Usage: pingpong\n");
+    exit(1);
+  }
+
+  //define two pipes.
+  int prcw[2]; //parent read and children write
+  int pwcr[2]; //parent write and children read
+  pipe(prcw);
+  pipe(pwcr);
+
+  char buf[5]; //used in read() to store inf
+
+  int pid=fork();
+  if(pid<0){
+	  fprintf(2,"fail to fork");
+	  exit(1);
+  }
+  else if(pid>0){ //now process is parent process
+	  close(pwcr[0]);
+	  close(prcw[1]);
+	  write(pwcr[1],"ping",4);
+	  close(pwcr[1]);
+	  read(prcw[0],buf,4);
+	  printf("%d: received %s\n",getpid(),buf);
+  }
+  else{  //now process is children process
+	  close(pwcr[1]);
+          close(prcw[0]);
+          read(pwcr[0],buf,4);  //before write use read for pingpong order
+          printf("%d: received %s\n",getpid(),buf);
+          write(prcw[1],"pong",4);
+          close(prcw[1]);
+  }
+
+
+  exit(0);
+}
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..85e169d
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,70 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+void childFilter(int parent_read){
+    int temp;
+    if(read(parent_read,&temp,sizeof(temp))==0){ //no more prime
+        close(parent_read);
+	exit(0);
+    }
+    printf("prime %d\n",temp);
+    //set pipe for child
+    int newp[2];
+    pipe(newp);
+    int pid=fork();
+    if(pid<0){
+	fprintf(2,"fail to fork\n");
+	exit(1);
+    }
+    else if(pid>0){
+        close(newp[0]); //read parent and write child (close read child)
+	int prime=temp; //the first is prime
+	while(read(parent_read,&temp,sizeof(temp))>0){
+	    if(temp%prime!=0){
+	    write(newp[1],&temp,sizeof(temp));
+	    }
+	}
+	close(parent_read);
+	close(newp[1]);
+	wait(0);
+    }
+    else{
+	close(newp[1]);
+	childFilter(newp[0]);
+    }
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 1){
+    fprintf(2, "Usage: primes\n");
+    exit(1);
+  }
+
+  //create a pipe
+  int p[2];
+  pipe(p);
+
+  int pid=fork();
+  if(pid<0){
+    fprintf(2,"fail to fork\n");
+    exit(1);
+  }
+  else if(pid>0){ //use parent to write
+    close(p[0]);
+    for(int i=2;i<=35;i++){	
+      write(p[1],&i,sizeof(i));
+    }
+    close(p[1]);
+    wait(0);
+  }
+  else{ //use child to read and create its child
+    close(p[1]);
+    childFilter(p[0]);
+  }
+
+  exit(0);
+}
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..b7c0184
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,28 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc != 2){
+    fprintf(2, "Usage: sleep <duration>\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    int duration=atoi(argv[i]);
+    if(duration==0){
+      fprintf(2,"please input a valid duration\n");
+      break;
+    }
+    if(sleep(duration) < 0){
+      fprintf(2, "sleep: %s failed to execute\n", argv[i]);
+      break;
+    }
+  }
+
+  exit(0);
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..f6c6492
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,51 @@
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  char*params[MAXARG];
+  char line[1024];
+  int anchor=0;
+
+  //copy argvs to params
+  char*cmd=argv[1];
+  for(int i=1;i<argc;i++){
+    params[anchor++]=argv[i];
+  }
+  int free_anchor=anchor;
+  int num=0;
+  while((num=read(0,line,1024))>0){
+    int pid=fork();
+    if(pid<0){
+      fprintf(2,"fail to fork\n");
+      exit(1);
+    }
+    else if(pid==0){ //child
+      char*arg=(char*)malloc(sizeof(line));
+      int index=0;
+      for(int i=0;i<num;i++){ //get complete statement
+	if(line[i]!=' '&&line[i]!='\n'){
+	  arg[index++]=line[i];
+	}
+	else{
+	  arg[index]=0;
+	  params[anchor++]=arg;
+	  index=0;
+	  arg=(char*)malloc(sizeof(line));
+	}
+      }
+      params[anchor]=0;
+      exec(cmd,params);
+      for(int i=free_anchor;i<anchor;i++){
+	      free(params[i]);
+      }
+    }
+    else{
+      wait((int*)(0));
+    }
+  }
+
+  exit(0);
+}
